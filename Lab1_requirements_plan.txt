Requirements:

 1. Creating and using your own class, struct, record and enum;
 2. Property usage in struct and class;
 3. Named and optional argument usage;
 4. Extension method usage;
 5. Iterating through collection the right way;
 6. Reading from a file using a stream;
 7. Create and use at least 1 generic type;
 8. Boxing and unboxing;
 9. LINQ to Objects usage (methods or queries);
10. Implement at least one of the standard .NET interfaces (IEnumerable, IComparable, IComparer, IEquatable, IEnumerator, etc.)

Functionality 1: Create a Simple Text Block
    - Requirement 1: Text Block itself will be a class.
    - Requirement 1: Record class can hold creation date information and other data that will be constant. The Record then will be useful in 
    filtering functionality to compare the data in the Record.
    - Requirement 1: Enums might be used to store text block classes inside. Another option might be to use them to create random note tags
    for the future perspective of adding other users to collaborate on notes.
        - Requirement 8: Suggestion to create an abstract Note class and have atleast 2 more classes that would polymorph from the abstract
        one (code note class, schedule note class). By doing this it would be possible to use boxing when creating the child class and unboxing
        after.
    - Requirement 1: Structs can be used to hold some simple data. (open for interpretation)
    - Requirement 2: Using properties in the text block class to encapsulate the text content and other properties.
    - Requirement 3: Creting a class will have the possibility to have initial data from the user (name of note), but if the data is not provided,
    the data will simply be set to initial properties (note #1, note #2, etc...).


Functionality 2: Save and Load Text Blocks
    - Requirement 6: Using streams to save/load to/from simple .txt file.

Functionality 3: Multiple Notes
    - Requirement 5: Anywhere where a for loop could be used, change it to foreach loop, iterating through all notes.
    - Requirement 9: Using LINQ query to filter user's notes by given tags or searching for a specific one.

Functionality 4: Text Formatting and Styling
    - Requirement 4: Creating extension methods for our Note class to apply text formatting and styling functionalities to the text.
    - Requirement 7: Using generics in the styling functionality to use the same method for different styling properties, for example changing
    color, making text bold or italic.


Lab2 requirements:

1. Relational database is used for storing data;
2. Create generic method, event or delegate; define at least 2 generic constraints;
3. Delegates usage;
4. Create at least 1 exception type and throw it; meaningfully deal with it; (most of the exceptions are logged to a file or a server);
5. Lambda expressions usage;
6. Usage of threading via Thread class;
7. Usage of async/await;
8. Use at least 1 concurrent collection or Monitor;
9. Regex usage;
10. No instances are created using 'new' keyword, dependency injection is used everywhere;
11. Unit and integration tests coverage at least 20%;

Creating Relational Database:
    - Requirement 1:
    - Requirement 9: Using Regex to validate users sign up data (special symbols) OR 
        using Regex when using the search function